{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","e","target","value","setState","react_default","a","createElement","className","onChange","placeholder","onClick","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","addOrRemove","renderAction","name","artist","album","TrackList","tracks","map","key","id","Components_Track_Track","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","playlist","onSave","accessToken","expirationIn","Spotify","getAccessToken","window","location","href","match","console","log","setTimeout","parseInt","getUserId","nameIn","uri","myHeader","Authorization","concat","fetch","headers","then","response","ok","json","Error","networkError","message","jsonResponse","displayUserId","res","_this2","urlToFetch","Content-Type","myBody","description","public","method","body","displayPlaylistId","uris","savePlaylist","userID","user","items","artists","App","playlistName","playlistTracks","updatePlaylistName","find","savedTrack","newList","push","trackToBeRemoved","filter","trackURIs","playlistIn","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2d4065d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {term: ''};\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e) {\n    const term = e.target.value;\n    this.setState({term: term});\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <a onClick={this.search}>SEARCH</a>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;\n\n\n","import React, { Component } from 'react';\nimport './Track.css';\n\nclass Track extends Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n  renderAction() {\n    return this.props.isRemoval ? \"-\" : \"+\";\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(){\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    let addOrRemove;\n    if(this.props.isRemoval) {\n      addOrRemove = <a onClick={this.removeTrack} className=\"Track-action\"> {this.renderAction()}</a>;\n    } else {\n      addOrRemove = <a onClick={this.addTrack} className=\"Track-action\"> {this.renderAction()}</a>;\n    }\n\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} {this.props.track.album} </p>\n        </div>\n        {addOrRemove}\n      </div>\n    )\n  }\n}\n\nexport default Track;\n\n\n","import React, { Component } from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends Component {\n  render() {\n    const trackInfo = this.props.tracks.map((track) => {\n      return ( \n        <div key={track.id}  className=\"TrackList\">\n          <Track onRemove={this.props.onRemove} onAdd={this.props.onAdd} isRemoval={this.props.isRemoval} track={track} />\n        </div>\n      )});\n\n\n    return trackInfo;\n    \n  }\n}\n\nexport default TrackList;\n\n\n","import React, { Component } from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList onAdd={this.props.onAdd} isRemoval={false} tracks={this.props.searchResults} />\n      </div>\n    )\n  }\n}\n\nexport default SearchResults;\n\n","import React, { Component } from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(e) {\n    const name = e.target.value;\n    this.props.onNameChange(name);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} value={this.props.name}/>\n        <TrackList onRemove={this.props.onRemove} isRemoval={true}  tracks={this.props.playlist}/>\n        <a onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</a>\n      </div>\n    )\n  }\n}\n\nexport default Playlist;\n\n","let accessToken = '';\nconst clientId = 'bf36988ddfb54a0b9795ff8d5df0cad9';\nconst redirectUri = 'http://jammming-lukez.surge.sh'\nlet expirationIn='';\n\nconst Spotify = {\n  getAccessToken(){\n\n    accessToken = window.location.href.match(/access_token=([^&]*)/);\n    expirationIn = window.location.href.match(/expires_in=([^&]*)/);\n  if(accessToken) {\n    return;\n    accessToken = window.location.href.match(/access_token=([^&]*)/);\n    expirationIn = window.location.href.match(/expires_in=([^&]*)/);\n    console.log(expirationIn);\n    console.log(parseInt(expirationIn[1])*1000);\n    \n    window.setTimeout(() => accessToken = '', parseInt(expirationIn[1]) * 1000);\n    //window.history.pushState('Access Token', null, '/');\n  }else {\n\n\n    window.location=\"https://accounts.spotify.com/authorize?client_id=\"+clientId+\"&response_type=token&scope=playlist-modify-public&redirect_uri=\"+redirectUri;\n\n    //accessToken = window.location.href.match(/access_token=([^&]*)/);\n\n  accessToken = window.location.href.match(/access_token=([^&]*)/);\n  expirationIn = window.location.href.match(/expires_in=([^&]*)/);\n  console.log(expirationIn);\n   window.setTimeout(() => accessToken = '', parseInt(expirationIn[1]) * 1000);\n   // window.history.pushState('Access Token', null, '/');\n  }\n\n//if(accessToken) return ;\n\n   // if(accessToken) return ;\n  },\n\n  getUserId(nameIn, uri){\n  \n  //savePlaylist(name, uri){\n    const myAccessToken = accessToken[1];\n    const myHeader = {Authorization: `Bearer ${accessToken[1]}`}\n    const urlToFetch = 'https://api.spotify.com/v1/me';\n    console.log(accessToken[1]); \n    console.log(myHeader);\n    return fetch(urlToFetch,\n      {\n        headers: myHeader\n      }\n    ).then (response => {\n      if(response.ok) {\n        console.log('response was ok');\n        return response.json();\n      }\n      throw new Error('Request failed!');\n\n    }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n      //console.log(jsonResponse);\n      //userID = jsonResponse.id;\n      console.log(jsonResponse.id);\n      this.displayUserId(jsonResponse, nameIn, uri);\n      return jsonResponse;\n    });\n\n  },\n\n  displayUserId(res, nameIn, uri){\n    console.log(res.id);\n    console.log(\"https://api.spotify.com/v1/users/\"+res.id+\"/playlists\");\n    const urlToFetch = `https://api.spotify.com/v1/users/${res.id}/playlists`;\n                      //https://api.spotify.com/v1/users/{user_id}/playlists\n    const myAccessToken = accessToken[1];\n    const myHeader = {Authorization: `Bearer ${accessToken[1]}`,\n                      'Content-Type': 'application/json'};\n    const myBody = {\n         name: nameIn,\n         description: \"List from Jammming\",\n         public: false\n       };\n    let playlistID;\n    console.log(urlToFetch);\n    console.log(myBody);\n    console.log(myHeader);\n    return fetch(urlToFetch,\n      {headers: myHeader,\n       method: 'POST',\n       body: myBody\n      }\n     ).then(response => {return response.json();})\n     .then(jsonResponse => {\n      console.log(jsonResponse);\n      this.displayPlaylistId(jsonResponse, uri);\n      //console.log(playlistID);\n      return jsonResponse;\n    });\n\n  },\n\n  displayPlaylistId(res, uri) {\n    console.log(res);\n    console.log(res.id);\n    //https://api.spotify.com/v1/playlists/{playlist_id}/tracks\n    const urlToFetch = `https://api.spotify.com/v1/playlists/${res.id}/tracks`;\n    const myAccessToken = accessToken[1];\n    const myHeader = {Authorization: `Bearer ${accessToken[1]}`,\n                      'Content-Type': 'application/json'};\n    const myBody = {\n         uris: uri\n       };\n    let playlistID;\n    console.log(urlToFetch);\n    console.log(myBody);\n    console.log(myHeader);\n    return fetch(urlToFetch,\n      {headers: myHeader,\n       method: 'POST',\n       body: myBody\n      }\n     ).then(response => {return response.json();})\n     .then(jsonResponse => {\n      console.log(jsonResponse);\n      //console.log(playlistID);\n      return jsonResponse;\n    });\n\n  },\n\n  savePlaylist(nameIn, uri){\n    if( !nameIn || !uri) return;\n    console.log(nameIn);\n    console.log(uri);\n\n    let userID;\n    userID = this.getUserId(nameIn, uri).then(user => {return user.id;});\n    console.log(userID);\n    console.log(\"https://api.spotify.com/v1/users/\"+userID+\"/playlists\");\n    userID = \"s596b4j698z9q1gfbk19inhts\";\n\nreturn;\n    const myAccessToken = accessToken[1];\n    const myHeader = {\"Authorization\": `Bearer ${accessToken[1]}`,\n                      \"Content-Type\": \"application/json\"};\n    const myBody = {\n         \"name\": \"name\",\n         \"description\": \"List from Jammming\",\n         \"public\": false\n       };\n    let playlistID;\n    console.log(myHeader);\n/*\n * BQC9Yzq2B7nxIYH1GVmLUbWorNZx_JR85d3n7HD_cT3ugbQZOnUr4piqbx7fLD4lAjvroLdrcSaTAZaId6QpZuElRXg8AnbBOIbZWRuwdFWxk4lt9ETPeb9TBzHPcB0Dc3yWEkF-uHut25qMThz_6-pMTZxYJceWYGwevTl0fetl6shfxhYQQkYyV4j_VGndbA\n\n       body: {'name': nameIn,\n         'description': \"List from Jammming\",\n         'public': false\n              },\n       headers: {Authorization: \"Bearer BQC9Yzq2B7nxIYH1GVmLUbWorNZx_JR85d3n7HD_cT3ugbQZOnUr4piqbx7fLD4lAjvroLdrcSaTAZaId6QpZuElRXg8AnbBOIbZWRuwdFWxk4lt9ETPeb9TBzHPcB0Dc3yWEkF-uHut25qMThz_6-pMTZxYJceWYGwevTl0fetl6shfxhYQQkYyV4j_VGndbA\", \nconsole.log('here1');\n      try {\n    const response = await fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n      {method: 'POST',\n       body: {'name': nameIn,\n         'description': \"List from Jammming\",\n         'public': false\n              },\n       headers: {Authorization: \"Bearer BQC9Yzq2B7nxIYH1GVmLUbWorNZx_JR85d3n7HD_cT3ugbQZOnUr4piqbx7fLD4lAjvroLdrcSaTAZaId6QpZuElRXg8AnbBOIbZWRuwdFWxk4lt9ETPeb9TBzHPcB0Dc3yWEkF-uHut25qMThz_6-pMTZxYJceWYGwevTl0fetl6shfxhYQQkYyV4j_VGndbA\", \n                'Content-Type': \"application/json\"}\n    });\nconsole.log('here?');\n    if(response.ok){\nconsole.log('response.ok');\n      const jsonResponse = await response.json();\n      return jsonResponse;\n    }\n    throw new Error('Request failed!');\n\n      } catch(e) {\n      if (e instanceof SyntaxError) {\n         console.log('Syntax');\n      } else {\n         console.log('non-Syntax');\n      }\n      console.log(e);console.log(e.name);console.log(e.message);}\n    }\n    d();\nreturn;\n//`https://api.spotify.com/v1/users/${userID}/playlists`,\n    fetch(\"https://api.spotify.com/v1/users/s596b4j698z9q1gfbk19inhts/playlists\",\n      {method: 'POST',\n       body: {\n         name: \"name\",\n         description: \"List from Jammming\",\n         public: false\n       },\n       headers: {Authorization: \"Bearer BQDbtBVjXFZJlGBUstqcu2QCSFg3AJzwIQq_xbyEpJvVsHyXeUIopi2tvxqXuRUljSX69pQZA5_KVwersimJVyoXQy65yVhxyWdr97gESPBD8JHQzUZdVZtBi7sMirXrUH4WkdwnCU__30ZLulySMNCsRPAsh1qIGeFOg1op5pFnnVyp1nuPVMOnIO3CyffioA\",\n                      'Content-Type': \"application/json\"}\n      }\n     ).then(response => {\n      if(response.ok) {\n        console.log('response was ok');\n        return response.json();\n      }\n      \n      throw new Error('Request failed!');\n\n    }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n      //console.log(jsonResponse);\n      playlistID = jsonResponse;\n      console.log(playlistID);\n      return playlistID;\n    });\n*/\n  },\n\n  search(term){\n    this.getAccessToken();\n    //this.savePlaylist('My JList',['a','b','c']);\n\n    console.log(accessToken[1]);\n    //console.log(expirationIn);\n//    accessToken=\"BQDEAl2jvjoiD3zF5QQxWfjuQBAwtBlhM6-sFeyNCbfEXY_9b95YFWbildzagDEFeWZsJ1SU0a8E1iAzwsCgY7m1WNMCBSo_sa3QOY1pazUKcXTevXBaDEt2G1VdJkyAzCfZusirYpHJIqbPiLk9gSMGrbAtCRtPW1i6TACrHv_r3rWR1W1IOszytHCjnJV3ag\";\n\n    const urlToFetch = \"https://api.spotify.com/v1/search?type=track&q=\"+term;\n    console.log(urlToFetch);\n\n    return fetch(urlToFetch,\n      {\n        headers: {Authorization: `Bearer ${accessToken[1]}`}\n      }\n    ).then (response => {\n      if(response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n\n    }, networkError => console.log(networkError.message)\n    ).then(jsonResponse => {\n    if(jsonResponse.tracks) {\n      const tracks = jsonResponse.tracks.items;\n      return tracks.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    }\n  });\n  }\n\n}\n\nexport default Spotify;\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../util/Spotify';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { searchResults: [],\n                   playlistName: \"New Playlist\",\n                   playlistTracks: []\n                 };\n/*\n    this.state = {searchResults: [{name: \"Util the Day I Die\", \n                                   artist: \"TobyMac\", \n                                   album: \"This is not a test\", \n                                   id: \"1\",\n                                   uri: \"892330abc\"},\n                                  {name: \"Beyond Me\",\n                                   artist: \"TobyMac\",\n                                   album: \"This is not a test\",\n                                   id: \"2\",\n                                   uri: \"234480dfg\"},\n                                  {name: \"Backsear Driver\",\n                                   artist: \"TobyMac\",\n                                   album: \"This is not a test\",\n                                   id: \"3\",\n                                   uri: \"9823477ee\"}],\n                  playlistName: \"My Playlist\",\n                  playlistTracks: [{name: \"Util the Day I Die\",\n                                   artist: \"TobyMac\",\n                                   album: \"This is not a test\",\n                                   id: \"1\",\n                                   uri: \"892330abc\"},\n                                  {name: \"Beyond Me\",\n                                   artist: \"TobyMac\",\n                                   album: \"This is not a test\",\n                                   id: \"2\",\n                                   uri: \"234480dfg\"}]\n                 };\n*/\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if(this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    const newList = this.state.playlistTracks;\n    newList.push(track);\n    this.setState({playlistTracks: newList});\n  }\n\n  removeTrack(trackToBeRemoved) {\n    const newList = this.state.playlistTracks.filter(track => track.id !== trackToBeRemoved.id);\n    this.setState({playlistTracks: newList});\n\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist(){\n    const trackURIs = [];\n    this.state.playlistTracks.map(track => trackURIs.push(track.uri));\n    console.log(trackURIs);\n    console.log(this.state.playlistName);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    this.setState({playlistName: 'New Playlist',\n                   playlistTracks: []});\n  }\n\n  search(term) {\n    Spotify.search(term).then(playlistIn => {\n      this.setState({searchResults: playlistIn});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults} />\n            <Playlist onSave={this.savePlaylist} name={this.state.playlistName} onNameChange={this.updatePlaylistName} onRemove={this.removeTrack} playlist={this.state.playlistTracks}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}